'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';

type Language = 'en' | 'es' | 'zh' | 'ko';

// Complete translations consolidated in single file
const translations = {
  en: {
    common: {
      welcome: 'Welcome',
      loading: 'Loading...',
      connect: 'Connect',
      disconnect: 'Disconnect',
      cancel: 'Cancel',
      confirm: 'Confirm',
      success: 'Success',
      error: 'Error',
      retry: 'Retry',
      close: 'Close',
      // Panel translations
      transactionHistory: 'Transaction History',
      actions: 'Actions',
      openHistoryPanel: 'Open history panel',
      openActionPanel: 'Open action panel',
      closePanel: 'Close panel',
      openPanel: 'Open panel',
      noTransactionsYet: 'No transactions yet.',
      clearTransactionHistoryConfirm: 'Are you sure you want to clear all transaction history? This action cannot be undone.',
      clearAllHistory: 'Clear All History',
      hash: 'Hash:',
      contract: 'Contract:',
      copied: 'Copied!',
      deleteTransaction: 'Delete Transaction',
      interact: 'Interact',
      // Transaction types
      sendPrefix: 'Send',
      deployPrefix: 'Deploy',
      mintPrefix: 'Mint',
      transferPrefix: 'Transfer',
      burnPrefix: 'Burn',
      interactionType: 'Interaction',
      approvePrefix: 'Approve',
      // Specific transaction types
      deployAirdropStandard: 'Deploy Airdrop Standard',
      deployAirdropWithFee: 'Deploy Airdrop With Fee',
      deployAirdropVesting: 'Deploy Airdrop Vesting',
      deployAirdropStaking: 'Deploy Airdrop Staking',
      deployAirdropWithdraw: 'Deploy Airdrop Withdraw',
      sendTxType: 'Send Transaction',
      deployTxType: 'Deploy Contract',
      mintInteraction: 'Mint Interaction',
      transferInteraction: 'Transfer Interaction',
      burnInteraction: 'Burn Interaction',
      approveInteraction: 'Approve Interaction',
      createTokenInteraction: 'Create Token Interaction',
      createNftInteraction: 'Create NFT Interaction',
      airdropInteraction: 'Airdrop Interaction'
    },
    balance: {
      // BalancePanel main elements
      panelTitle: 'Balances',
      connectWalletMessage: 'Please connect your wallet to see balances.',
      discoveringMessage: 'Discovering and loading balances...',
      discoveryFailed: 'Discovery failed. You may see partial results.',
      noBalancesFound: 'No token balances found for this address.',
      loading: 'Loading...',
      // Buttons
      discoveringTokens: 'üîç Discovering...',
      discoverTokens: 'üîç Discover Tokens',
      addingToken: 'Adding...',
      addToken: 'Add',
      // Input placeholders
      addTokenPlaceholder: 'Add token by address...',
      // Error messages
      errorPrefix: 'Error:',
      invalidAddress: 'Please enter a valid contract address.',
      addressAlreadyAdded: 'This address has already been added.',
      rpcNotAvailable: 'RPC URL is not available. Cannot verify contract type.',
      unsupportedContractType: 'Could not determine contract type, or it is not a supported token/NFT standard.',
      // Labels
      nativeToken: 'Native Token',
      unknownToken: 'Unknown Token'
    },
    generatedAccounts: {
      // GeneratedAccountsPanel
      panelTitle: 'Generated Accounts',
      generatingAccount: 'Generating...',
      generateNewAccount: 'Generate New Account',
      noAccountsGenerated: 'No accounts generated yet.',
      address: 'Address:',
      privateKey: 'Private Key:'
    },
    nav: {
      home: 'Home',
      balance: 'Balance',
      createToken: 'Create Token',
      createNft: 'Create NFT',
      airdropTools: 'Airdrop Tools',
      connectWallet: 'Connect Wallet',
      connectPrivateKey: 'Connect with Private Key',
      rescueDapp: 'Rescue DApp',
      disconnect: 'Disconnect'
    },
    home: {
      welcomeTitle: 'Welcome to EVM Tools',
      welcomeDescription: 'EVM Tools is a comprehensive decentralized application that empowers you to create, deploy, and interact with various smart contracts on EVM-compatible blockchains. This platform provides an intuitive interface for managing your blockchain assets and transactions.',
      keyFeatures: 'Key Features',
      tokenCreationTitle: 'Token Creation',
      tokenCreationDesc: 'Create your own custom ERC-20 tokens with just a few clicks. Configure token name, symbol, supply, and advanced features like minting, burning, and permit functionality. Deploy directly from the app and start using your tokens immediately.',
      nftCreationTitle: 'NFT Creation',
      nftCreationDesc: 'Mint custom ERC-721 NFTs with your own metadata and images. Create unique digital assets and deploy them to the blockchain. Perfect for artists, collectors, and creators looking to launch their own NFT collections.',
      airdropContractsTitle: 'Airdrop Contracts',
      airdropContractsDesc: 'Deploy and configure airdrop contracts for your tokens. Set up claim periods, manage owner controls, and distribute tokens to your community efficiently. The airdrop interface allows you to easily manage all aspects of your distribution campaign.',
      tokenInteractionTitle: 'Token Interaction',
      tokenInteractionDesc: 'Send tokens to other addresses, check balances, and interact with existing smart contracts. The intuitive interface makes it easy to perform transactions and manage your assets across different networks.',
      dashboardMessage: 'This dashboard serves as your central control panel. Select an asset from your balances to get started, or use the actions panel on the right to create new assets. Your transaction history is available in the panel on the left.',
      developmentMessage: "We're actively working to add more features and tools to expand the platform's capabilities. Stay tuned for updates!"
    },
    actions: {
      panelTitle: 'Actions',
      connectWalletMessage: 'Connect a wallet to begin',
      selectAssetMessage: 'Select an asset to see actions',
      selectedPrefix: 'Selected',
      sendTokenButton: 'Send',
      transferNftButton: 'Transfer NFT',
      interactContractButton: 'Interact with Contract',
      viewBalancesButton: 'View Balances',
      createTokenButton: 'Create Token',
      createNftButton: 'Create NFT',
      airdropToolsButton: 'Airdrop Tools',
      loadingMessage: 'Loading actions...',
      nativeSymbol: 'Native'
    },
    airdropPage: {
      // AirdropPage
      title: 'Airdrop Tools',
      connectWalletMessage: 'Please connect your wallet to manage airdrops.',
      loadContractPlaceholder: 'Enter contract address to load',
      loadButton: 'Load',
      hideDeployButton: 'Hide Deploy',
      deployNewButton: 'Deploy New',
      newContractDeployedMessage: 'New %deployedContractType% contract deployed at %address%',
      detectingContractTypeMessage: 'Detecting contract type for %address%...',
      invalidAddressError: 'Error: Invalid address provided.',
      contractTypeDetectedMessage: 'Contract type detected: %type%. You can now interact with it.',
      actionReceivedMessage: 'Action received. Refreshing data...',
      contractInfoTitle: 'Contract Information',
      addressLabel: 'Address:',
      setupStatusLabel: 'Setup:',
      yes: 'Yes',
      no: 'No',
      tokenLabel: 'Token:',
      decimalsLabel: 'Decimals:',
      totalAllocatedLabel: 'Total Allocated:',
      totalClaimedLabel: 'Total Claimed:',
      vestingStartLabel: 'Vesting Start:',
      vestingDurationLabel: 'Vesting Duration:',
      stakingContractLabel: 'Staking Contract:',
      snapshotBlockLabel: 'Snapshot Block:',
      feeTokenLabel: 'Fee Token:',
      claimFeeLabel: 'Claim Fee:',
      // DeployPanel
      walletRequiredError: 'Wallet connection is required to deploy.',
      fieldsRequiredError: 'Token address and airdrop end date are required.',
      vestingDateRequiredError: 'Vesting end date is required for this contract type.',
      vestingDateFutureError: 'Vesting end date must be in the future.',
      deployTransactionMessage: 'Deploying transaction for',
      feeConfigMessage: 'Contract deployed. Now configuring fee settings...',
      deploySuccessMessage: 'Contract deployed successfully',
      feeConfigSuccessMessage: 'Fee settings configured successfully!',
      transactionRejected: 'Transaction rejected by user.',
      deployErrorMessage: 'Deployment Error: ',
      panelTitle: 'Deploy New Airdrop Contract',
      panelDescription: 'Select a contract type and fill in the details to deploy.',
      contractTypeLabel: 'Contract Type',
      tokenAddressLabel: 'Airdrop Token Address',
      airdropDateLabel: 'Airdrop End Date',
      vestingDateLabel: 'Vesting End Date',
      feeTypeLabel: 'Fee Type',
      nativeOption: 'Native (ETH, MATIC, etc.)',
      erc20Option: 'ERC20 Token',
      feeTokenAddressLabel: 'Fee Token Address',
      feeAmountLabel: 'Fee Amount',
      feeAmountPlaceholder: 'e.g., 0.1',
      deployWaiting: 'Waiting for approval...',
      deployConfirming: 'Confirming deployment...',
      deployButton: 'Deploy Contract',
      gasWarning: 'A gas fee will be charged for this transaction.',
      // OwnerPanel
      ownerPanelTitle: 'Owner Panel',
      transactionSuccess: 'Transaction confirmed successfully!',
      transactionError: 'Error: ',
      invalidAllocations: 'Error: Check beneficiary addresses and ensure lists match.',
      invalidAmount: 'Error: Invalid amount provided.',
      addingAllocations: 'Adding allocations...',
      fundingContract: 'Transferring %amount% tokens to the contract...',
      withdrawingUnclaimed: 'Withdrawing unclaimed tokens...',
      emergencyWithdrawing: 'Performing emergency withdrawal...',
      step1Title: 'Step 1: Add Allocations',
      step1Description: 'Define who receives tokens and how many. Separate addresses and amounts with commas.',
      beneficiariesPlaceholder: 'Beneficiary addresses (0x..., 0x...)',
      amountsPlaceholder: 'Amounts (100.5, 50, ...)',
      addAllocationButton: 'Add Allocations',
      processing: 'Processing...',
      step2Title: 'Step 2: Fund Airdrop Contract',
      step2Description: 'Transfer tokens from your wallet to the contract so they can be claimed.',
      currentBalance: 'Current contract balance:',
      fundAmountPlaceholder: 'Amount to fund',
      fundButton: 'Fund Contract',
      contractManagementTitle: 'Contract Management',
      withdrawUnclaimedButton: 'Withdraw Unclaimed',
      emergencyTokenPlaceholder: 'Token address (for emergency withdrawal)',
      emergencyWithdrawButton: 'Emergency Withdraw',
      // UserPanel
      userPanel_title: 'User Panel',
      userPanel_successMessage: 'Action completed successfully!',
      userPanel_errorPrefix: 'Error: ',
      userPanel_withdrawButton: 'Withdraw',
      userPanel_claimVestButton: 'Claim Vested Tokens',
      userPanel_claimStakingButton: 'Claim Staking Rewards',
      userPanel_claimTokensButton: 'Claim Tokens',
      userPanel_noAllocationMessage: 'You have no allocation to claim.',
      userPanel_alreadyClaimedMessage: 'You have already claimed your tokens.',
      userPanel_processingMessage: 'Processing your request...',
      userPanel_totalAllocationPrefix: 'Your Total Allocation',
      userPanel_claimableVestedPrefix: 'Claimable (Vested)',
      userPanel_claimablePrefix: 'Your Claimable Amount',
      userPanel_claimedPrefix: 'Claimed',
      userPanel_yes: 'Yes',
      userPanel_no: 'No',
      userPanel_processing: 'Processing...',
      userPanel_noTokensMessage: 'You are not eligible for this airdrop or have no tokens to claim at this time.'
    }
  },
  es: {
    common: {
      welcome: 'Bienvenido',
      loading: 'Cargando...',
      connect: 'Conectar',
      disconnect: 'Desconectar',
      cancel: 'Cancelar',
      confirm: 'Confirmar',
      success: '√âxito',
      error: 'Error',
      retry: 'Reintentar',
      close: 'Cerrar',
      // Panel translations
      transactionHistory: 'Historial de Transacciones',
      actions: 'Acciones',
      openHistoryPanel: 'Abrir panel de historial',
      openActionPanel: 'Abrir panel de acciones',
      closePanel: 'Cerrar panel',
      openPanel: 'Abrir panel',
      noTransactionsYet: 'A√∫n no hay transacciones.',
      clearTransactionHistoryConfirm: '¬øEst√°s seguro de que quieres borrar todo el historial de transacciones? Esta acci√≥n no se puede deshacer.',
      clearAllHistory: 'Borrar Todo el Historial',
      hash: 'Hash:',
      contract: 'Contrato:',
      copied: '¬°Copiado!',
      deleteTransaction: 'Eliminar Transacci√≥n',
      interact: 'Interactuar',
      // Transaction types
      sendPrefix: 'Enviar',
      deployPrefix: 'Desplegar',
      mintPrefix: 'Acu√±ar',
      transferPrefix: 'Transferir',
      burnPrefix: 'Quemar',
      interactionType: 'Interacci√≥n',
      approvePrefix: 'Aprobar',
      // Specific transaction types
      deployAirdropStandard: 'Desplegar Airdrop Est√°ndar',
      deployAirdropWithFee: 'Desplegar Airdrop con Tarifa',
      deployAirdropVesting: 'Desplegar Airdrop Vesting',
      deployAirdropStaking: 'Desplegar Airdrop Staking',
      deployAirdropWithdraw: 'Desplegar Airdrop Withdraw',
      sendTxType: 'Transacci√≥n de Env√≠o',
      deployTxType: 'Desplegar Contrato',
      mintInteraction: 'Interacci√≥n de Acu√±aci√≥n',
      transferInteraction: 'Interacci√≥n de Transferencia',
      burnInteraction: 'Interacci√≥n de Quema',
      approveInteraction: 'Interacci√≥n de Aprobaci√≥n',
      createTokenInteraction: 'Interacci√≥n de Crear Token',
      createNftInteraction: 'Interacci√≥n de Crear NFT',
      airdropInteraction: 'Interacci√≥n de Airdrop'
    },
    balance: {
      // BalancePanel main elements
      panelTitle: 'Balances',
      connectWalletMessage: 'Por favor conecta tu billetera para ver balances.',
      discoveringMessage: 'Descubriendo y cargando balances...',
      discoveryFailed: 'Descubrimiento fall√≥. Puede que veas resultados parciales.',
      noBalancesFound: 'No se encontraron balances de token para esta direcci√≥n.',
      loading: 'Cargando...',
      // Buttons
      discoveringTokens: 'üîç Descubriendo...',
      discoverTokens: 'üîç Descubrir Tokens',
      addingToken: 'Agregando...',
      addToken: 'Agregar',
      // Input placeholders
      addTokenPlaceholder: 'Agregar token por direcci√≥n...',
      // Error messages
      errorPrefix: 'Error:',
      invalidAddress: 'Por favor ingresa una direcci√≥n de contrato v√°lida.',
      addressAlreadyAdded: 'Esta direcci√≥n ya ha sido agregada.',
      rpcNotAvailable: 'URL de RPC no est√° disponible. No se puede verificar el tipo de contrato.',
      unsupportedContractType: 'No se pudo determinar el tipo de contrato, o no es un est√°ndar de token/NFT soportado.',
      // Labels
      nativeToken: 'Token Nativo',
      unknownToken: 'Token Desconocido'
    },
    generatedAccounts: {
      // GeneratedAccountsPanel
      panelTitle: 'Cuentas Generadas',
      generatingAccount: 'Generando...',
      generateNewAccount: 'Generar Nueva Cuenta',
      noAccountsGenerated: 'A√∫n no hay cuentas generadas.',
      address: 'Direcci√≥n:',
      privateKey: 'Clave Privada:'
    },
    nav: {
      home: 'Inicio',
      balance: 'Balance',
      createToken: 'Crear Token',
      createNft: 'Crear NFT',
      airdropTools: 'Herramientas de Airdrop',
      connectWallet: 'Conectar Billetera',
      connectPrivateKey: 'Conectar con Clave Privada',
      rescueDapp: 'DApp de Rescate',
      disconnect: 'Desconectar'
    },
    home: {
      welcomeTitle: 'Bienvenido a EVM Tools',
      welcomeDescription: 'EVM Tools es una aplicaci√≥n descentralizada completa que te permite crear, desplegar e interactuar con varios contratos inteligentes en blockchains compatibles con EVM. Esta plataforma proporciona una interfaz intuitiva para gestionar tus activos y transacciones blockchain.',
      keyFeatures: 'Caracter√≠sticas Principales',
      tokenCreationTitle: 'Creaci√≥n de Tokens',
      tokenCreationDesc: 'Crea tus propios tokens ERC-20 personalizados con solo unos clics. Configura nombre del token, s√≠mbolo, suministro y funciones avanzadas como minteo, quema y funcionalidad de permiso. Despliega directamente desde la app y comienza a usar tus tokens inmediatamente.',
      nftCreationTitle: 'Creaci√≥n de NFT',
      nftCreationDesc: 'Acu√±a NFTs ERC-721 personalizados con tus propios metadatos e im√°genes. Crea activos digitales √∫nicos y despli√©gulos en la blockchain. Perfecto para artistas, coleccionistas y creadores que buscan lanzar sus propias colecciones NFT.',
      airdropContractsTitle: 'Contratos de Airdrop',
      airdropContractsDesc: 'Despliega y configura contratos de airdrop para tus tokens. Configura per√≠odos de reclamo, gestiona controles de propietario y distribuye tokens a tu comunidad eficientemente. La interfaz de airdrop te permite gestionar f√°cilmente todos los aspectos de tu campa√±a de distribuci√≥n.',
      tokenInteractionTitle: 'Interacci√≥n con Tokens',
      tokenInteractionDesc: 'Env√≠a tokens a otras direcciones, verifica balances e interact√∫a con contratos inteligentes existentes. La interfaz intuitiva facilita la realizaci√≥n de transacciones y la gesti√≥n de tus activos en diferentes redes.',
      dashboardMessage: 'Este panel de control sirve como tu centro de control principal. Selecciona un activo de tus balances para comenzar, o usa el panel de acciones a la derecha para crear nuevos activos. Tu historial de transacciones est√° disponible en el panel de la izquierda.',
      developmentMessage: '¬°Estamos trabajando activamente en agregar m√°s funciones y herramientas para expandir las capacidades de la plataforma. Mantente atento a las actualizaciones!'
    },
    actions: {
      panelTitle: 'Acciones',
      connectWalletMessage: 'Conecta una billetera para comenzar',
      selectAssetMessage: 'Selecciona un activo para ver acciones',
      selectedPrefix: 'Seleccionado',
      sendTokenButton: 'Enviar',
      transferNftButton: 'Transferir NFT',
      interactContractButton: 'Interactuar con Contrato',
      viewBalancesButton: 'Ver Balances',
      createTokenButton: 'Crear Token',
      createNftButton: 'Crear NFT',
      airdropToolsButton: 'Herramientas de Airdrop',
      loadingMessage: 'Cargando acciones...',
      nativeSymbol: 'Nativo'
    },
    airdropPage: {
      // AirdropPage
      title: 'Herramientas de Airdrop',
      connectWalletMessage: 'Por favor, conecta tu billetera para gestionar los airdrops.',
      loadContractPlaceholder: 'Ingresa la direcci√≥n del contrato para cargar',
      loadButton: 'Cargar',
      hideDeployButton: 'Ocultar Despliegue',
      deployNewButton: 'Desplegar Nuevo',
      newContractDeployedMessage: 'Nuevo contrato %deployedContractType% desplegado en %address%',
      detectingContractTypeMessage: 'Detectando tipo de contrato para %address%...',
      invalidAddressError: 'Error: La direcci√≥n proporcionada no es v√°lida.',
      contractTypeDetectedMessage: 'Tipo de contrato detectado: %type%. Ahora puedes interactuar con √©l.',
      actionReceivedMessage: 'Acci√≥n recibida. Actualizando datos...',
      contractInfoTitle: 'Informaci√≥n del Contrato',
      addressLabel: 'Direcci√≥n:',
      setupStatusLabel: 'Configurado:',
      yes: 'S√≠',
      no: 'No',
      tokenLabel: 'Token:',
      decimalsLabel: 'Decimales:',
      totalAllocatedLabel: 'Total Asignado:',
      totalClaimedLabel: 'Total Reclamado:',
      vestingStartLabel: 'Inicio de Vesting:',
      vestingDurationLabel: 'Duraci√≥n de Vesting:',
      stakingContractLabel: 'Contrato de Staking:',
      snapshotBlockLabel: 'Bloque de Snapshot:',
      feeTokenLabel: 'Token de Tarifa:',
      claimFeeLabel: 'Tarifa de Reclamo:',
      // DeployPanel
      walletRequiredError: 'Se requiere conexi√≥n con la billetera para desplegar.',
      fieldsRequiredError: 'La direcci√≥n del token y la fecha de finalizaci√≥n del airdrop son obligatorias.',
      vestingDateRequiredError: 'La fecha de finalizaci√≥n del vesting es obligatoria para este tipo de contrato.',
      vestingDateFutureError: 'La fecha de finalizaci√≥n del vesting debe ser en el futuro.',
      deployTransactionMessage: 'Desplegando transacci√≥n para',
      feeConfigMessage: 'Contrato desplegado. Ahora configurando las tarifas...',
      deploySuccessMessage: 'Contrato desplegado exitosamente',
      feeConfigSuccessMessage: '¬°Configuraci√≥n de tarifas exitosa!',
      transactionRejected: 'Transacci√≥n rechazada por el usuario.',
      deployErrorMessage: 'Error de Despliegue: ',
      panelTitle: 'Desplegar Nuevo Contrato de Airdrop',
      panelDescription: 'Selecciona un tipo de contrato y completa los detalles para desplegar.',
      contractTypeLabel: 'Tipo de Contrato',
      tokenAddressLabel: 'Direcci√≥n del Token del Airdrop',
      airdropDateLabel: 'Fecha de Finalizaci√≥n del Airdrop',
      vestingDateLabel: 'Fecha de Finalizaci√≥n del Vesting',
      feeTypeLabel: 'Tipo de Tarifa',
      nativeOption: 'Nativo (ETH, MATIC, etc.)',
      erc20Option: 'Token ERC20',
      feeTokenAddressLabel: 'Direcci√≥n del Token de Tarifa',
      feeAmountLabel: 'Monto de la Tarifa',
      feeAmountPlaceholder: 'ej: 0.1',
      deployWaiting: 'Esperando aprobaci√≥n...',
      deployConfirming: 'Confirmando despliegue...',
      deployButton: 'Desplegar Contrato',
      gasWarning: 'Se cobrar√° una tarifa de gas por esta transacci√≥n.',
      // OwnerPanel
      ownerPanelTitle: 'Panel del Propietario',
      transactionSuccess: '¬°Transacci√≥n confirmada exitosamente!',
      transactionError: 'Error: ',
      invalidAllocations: 'Error: Verifica las direcciones de los beneficiarios y aseg√∫rate de que las listas coincidan.',
      invalidAmount: 'Error: Monto inv√°lido proporcionado.',
      addingAllocations: 'Agregando asignaciones...',
      fundingContract: 'Transfiriendo %amount% tokens al contrato...',
      withdrawingUnclaimed: 'Retirando tokens no reclamados...',
      emergencyWithdrawing: 'Realizando retiro de emergencia...',
      step1Title: 'Paso 1: Agregar Asignaciones',
      step1Description: 'Define qui√©n recibe tokens y cu√°ntos. Separa las direcciones y los montos con comas.',
      beneficiariesPlaceholder: 'Direcciones de beneficiarios (0x..., 0x...)',
      amountsPlaceholder: 'Montos (100.5, 50, ...)',
      addAllocationButton: 'Agregar Asignaciones',
      processing: 'Procesando...',
      step2Title: 'Paso 2: Fondear Contrato de Airdrop',
      step2Description: 'Transfiere los tokens desde tu billetera al contrato para que puedan ser reclamados.',
      currentBalance: 'Balance actual del contrato:',
      fundAmountPlaceholder: 'Cantidad a fondear',
      fundButton: 'Fondear Contrato',
      contractManagementTitle: 'Gesti√≥n del Contrato',
      withdrawUnclaimedButton: 'Retirar No Reclamados',
      emergencyTokenPlaceholder: 'Direcci√≥n del token (para retiro de emergencia)',
      emergencyWithdrawButton: 'Retiro de Emergencia',
      // UserPanel
      userPanel_title: 'Panel de Usuario',
      userPanel_successMessage: '¬°Acci√≥n completada exitosamente!',
      userPanel_errorPrefix: 'Error: ',
      userPanel_withdrawButton: 'Retirar',
      userPanel_claimVestButton: 'Reclamar Tokens de Vesting',
      userPanel_claimStakingButton: 'Reclamar Recompensas de Staking',
      userPanel_claimTokensButton: 'Reclamar Tokens',
      userPanel_noAllocationMessage: 'No tienes una asignaci√≥n para reclamar.',
      userPanel_alreadyClaimedMessage: 'Ya has reclamado tus tokens.',
      userPanel_processingMessage: 'Procesando tu solicitud...',
      userPanel_totalAllocationPrefix: 'Tu Asignaci√≥n Total',
      userPanel_claimableVestedPrefix: 'Reclamable (Vesting)',
      userPanel_claimablePrefix: 'Tu Monto Reclamable',
      userPanel_claimedPrefix: 'Reclamado',
      userPanel_yes: 'S√≠',
      userPanel_no: 'No',
      userPanel_processing: 'Procesando...',
      userPanel_noTokensMessage: 'No eres elegible para este airdrop o no tienes tokens para reclamar en este momento.'
    }
  },
  zh: {
    common: {
      welcome: 'Ê¨¢Ëøé',
      loading: 'Âä†ËΩΩ‰∏≠...',
      connect: 'ËøûÊé•',
      disconnect: 'Êñ≠ÂºÄËøûÊé•',
      cancel: 'ÂèñÊ∂à',
      confirm: 'Á°ÆËÆ§',
      success: 'ÊàêÂäü',
      error: 'ÈîôËØØ',
      retry: 'ÈáçËØï',
      close: 'ÂÖ≥Èó≠',
      // Panel translations
      transactionHistory: '‰∫§ÊòìÂéÜÂè≤',
      actions: 'Êìç‰Ωú',
      openHistoryPanel: 'ÊâìÂºÄÂéÜÂè≤Èù¢Êùø',
      openActionPanel: 'ÊâìÂºÄÊìç‰ΩúÈù¢Êùø',
      closePanel: 'ÂÖ≥Èó≠Èù¢Êùø',
      openPanel: 'ÊâìÂºÄÈù¢Êùø',
      noTransactionsYet: 'ÊöÇÊó†‰∫§Êòì„ÄÇ',
      clearTransactionHistoryConfirm: 'ÊÇ®Á°ÆÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâ‰∫§ÊòìÂéÜÂè≤ÂêóÔºüÊ≠§Êìç‰ΩúÊó†Ê≥ïÊí§ÈîÄ„ÄÇ',
      clearAllHistory: 'Ê∏ÖÈô§ÊâÄÊúâÂéÜÂè≤',
      hash: 'ÂìàÂ∏åÔºö',
      contract: 'ÂêàÁ∫¶Ôºö',
      copied: 'Â∑≤Â§çÂà∂ÔºÅ',
      deleteTransaction: 'Âà†Èô§‰∫§Êòì',
      interact: '‰∫§‰∫í',
      // Transaction types
      sendPrefix: 'ÂèëÈÄÅ',
      deployPrefix: 'ÈÉ®ÁΩ≤',
      mintPrefix: 'Èì∏ÈÄ†',
      transferPrefix: 'ËΩ¨ËÆ©',
      burnPrefix: 'ÈîÄÊØÅ',
      interactionType: '‰∫§‰∫í',
      approvePrefix: 'ÊâπÂáÜ',
      // Specific transaction types
      deployAirdropStandard: 'ÈÉ®ÁΩ≤Ê†áÂáÜÁ©∫Êäï',
      deployAirdropWithFee: 'ÈÉ®ÁΩ≤Â∏¶Ë¥πÁ©∫Êäï',
      deployAirdropVesting: 'ÈÉ®ÁΩ≤ÂΩíÂ±ûÁ©∫Êäï',
      deployAirdropStaking: 'ÈÉ®ÁΩ≤Ë¥®ÊäºÁ©∫Êäï',
      deployAirdropWithdraw: 'ÈÉ®ÁΩ≤ÊèêÂèñÁ©∫Êäï',
      sendTxType: 'ÂèëÈÄÅ‰∫§Êòì',
      deployTxType: 'ÈÉ®ÁΩ≤ÂêàÁ∫¶',
      mintInteraction: 'Èì∏ÈÄ†‰∫§‰∫í',
      transferInteraction: 'ËΩ¨ËÆ©‰∫§‰∫í',
      burnInteraction: 'ÈîÄÊØÅ‰∫§‰∫í',
      approveInteraction: 'ÊâπÂáÜ‰∫§‰∫í',
      createTokenInteraction: 'ÂàõÂª∫‰ª£Â∏Å‰∫§‰∫í',
      createNftInteraction: 'ÂàõÂª∫NFT‰∫§‰∫í',
      airdropInteraction: 'Á©∫Êäï‰∫§‰∫í'
    },
    nav: {
      home: 'È¶ñÈ°µ',
      balance: '‰ΩôÈ¢ù',
      createToken: 'ÂàõÂª∫‰ª£Â∏Å',
      createNft: 'ÂàõÂª∫NFT',
      airdropTools: 'Á©∫ÊäïÂ∑•ÂÖ∑',
      connectWallet: 'ËøûÊé•Èí±ÂåÖ',
      connectPrivateKey: '‰ΩøÁî®ÁßÅÈí•ËøûÊé•',
      rescueDapp: 'ÊïëÊè¥DApp',
      disconnect: 'Êñ≠ÂºÄËøûÊé•'
    },
    home: {
      welcomeTitle: 'Ê¨¢Ëøé‰ΩøÁî® EVM Tools',
      welcomeDescription: 'EVM Tools ÊòØ‰∏Ä‰∏™ÂÖ®Èù¢ÁöÑÂéª‰∏≠ÂøÉÂåñÂ∫îÁî®Á®ãÂ∫èÔºåËÆ©ÊÇ®ËÉΩÂ§üÂàõÂª∫„ÄÅÈÉ®ÁΩ≤Âπ∂‰∏é EVM ÂÖºÂÆπÂå∫ÂùóÈìæ‰∏äÁöÑÂêÑÁßçÊô∫ËÉΩÂêàÁ∫¶ËøõË°å‰∫§‰∫í„ÄÇËØ•Âπ≥Âè∞Êèê‰æõÁõ¥ËßÇÁöÑÁïåÈù¢Êù•ÁÆ°ÁêÜÊÇ®ÁöÑÂå∫ÂùóÈìæËµÑ‰∫ßÂíå‰∫§Êòì„ÄÇ',
      keyFeatures: '‰∏ªË¶ÅÂäüËÉΩ',
      tokenCreationTitle: '‰ª£Â∏ÅÂàõÂª∫',
      tokenCreationDesc: 'Âè™ÈúÄÂá†Ê¨°ÁÇπÂáªÂç≥ÂèØÂàõÂª∫ÊÇ®Ëá™Â∑±ÁöÑËá™ÂÆö‰πâ ERC-20 ‰ª£Â∏Å„ÄÇÈÖçÁΩÆ‰ª£Â∏ÅÂêçÁß∞„ÄÅÁ¨¶Âè∑„ÄÅ‰æõÂ∫îÈáè‰ª•ÂèäÈ´òÁ∫ßÂäüËÉΩÔºåÂ¶ÇÈì∏ÈÄ†„ÄÅÈîÄÊØÅÂíåËÆ∏ÂèØÂäüËÉΩ„ÄÇÁõ¥Êé•‰ªéÂ∫îÁî®‰∏≠ÈÉ®ÁΩ≤Âπ∂ÂºÄÂßãÁ´ãÂç≥‰ΩøÁî®ÊÇ®ÁöÑ‰ª£Â∏Å„ÄÇ',
      nftCreationTitle: 'NFT ÂàõÂª∫',
      nftCreationDesc: '‰ΩøÁî®ÊÇ®Ëá™Â∑±ÁöÑÂÖÉÊï∞ÊçÆÂíåÂõæÂÉèÈì∏ÈÄ†Ëá™ÂÆö‰πâ ERC-721 NFT„ÄÇÂàõÂª∫Áã¨ÁâπÁöÑÊï∞Â≠óËµÑ‰∫ßÂπ∂Â∞ÜÂÖ∂ÈÉ®ÁΩ≤Âà∞Âå∫ÂùóÈìæ‰∏ä„ÄÇÈùûÂ∏∏ÈÄÇÂêàËâ∫ÊúØÂÆ∂„ÄÅÊî∂ËóèÂÆ∂ÂíåÂ∏åÊúõÊé®Âá∫Ëá™Â∑± NFT Á≥ªÂàóÁöÑÂàõ‰ΩúËÄÖ„ÄÇ',
      airdropContractsTitle: 'Á©∫ÊäïÂêàÁ∫¶',
      airdropContractsDesc: '‰∏∫ÊÇ®ÁöÑ‰ª£Â∏ÅÈÉ®ÁΩ≤ÂíåÈÖçÁΩÆÁ©∫ÊäïÂêàÁ∫¶„ÄÇËÆæÁΩÆÈ¢ÜÂèñÊúü„ÄÅÁÆ°ÁêÜÊâÄÊúâËÄÖÊéßÂà∂ÔºåÂπ∂È´òÊïàÂú∞‰∏∫ÊÇ®ÁöÑÁ§æÂå∫ÂàÜÂèë‰ª£Â∏Å„ÄÇÁ©∫ÊäïÁïåÈù¢ËÆ©ÊÇ®ËΩªÊùæÁÆ°ÁêÜÂàÜÂèëÊ¥ªÂä®ÁöÑÂêÑ‰∏™ÊñπÈù¢„ÄÇ',
      tokenInteractionTitle: '‰ª£Â∏Å‰∫§‰∫í',
      tokenInteractionDesc: 'Â∞Ü‰ª£Â∏ÅÂèëÈÄÅÂà∞ÂÖ∂‰ªñÂú∞ÂùÄ„ÄÅÊ£ÄÊü•‰ΩôÈ¢ùÂπ∂‰∏éÁé∞ÊúâÁöÑÊô∫ËÉΩÂêàÁ∫¶ËøõË°å‰∫§‰∫í„ÄÇÁõ¥ËßÇÁöÑÁïåÈù¢ËÆ©ÊÇ®ÂèØ‰ª•ËΩªÊùæËøõË°å‰∫§ÊòìÂπ∂Âú®‰∏çÂêåÁΩëÁªú‰∏äÁÆ°ÁêÜËµÑ‰∫ß„ÄÇ',
      dashboardMessage: 'Ê≠§‰ª™Ë°®Êùø‰Ωú‰∏∫ÊÇ®ÁöÑ‰∏≠Â§ÆÊéßÂà∂Èù¢Êùø„ÄÇ‰ªéÊÇ®ÁöÑ‰ΩôÈ¢ù‰∏≠ÈÄâÊã©ËµÑ‰∫ßÂºÄÂßãÔºåÊàñËÄÖ‰ΩøÁî®Âè≥‰æßÁöÑÊìç‰ΩúÈù¢ÊùøÂàõÂª∫Êñ∞ËµÑ‰∫ß„ÄÇÊÇ®ÁöÑ‰∫§ÊòìÂéÜÂè≤ÂèØÂú®Â∑¶‰æßÈù¢Êùø‰∏≠Êü•Áúã„ÄÇ',
      developmentMessage: 'Êàë‰ª¨Ê≠£Âú®ÁßØÊûÅÂ∑•‰Ωú‰ª•Ê∑ªÂä†Êõ¥Â§öÂäüËÉΩÂíåÂ∑•ÂÖ∑Êù•Êâ©Â±ïÂπ≥Âè∞ÁöÑÂäüËÉΩ„ÄÇÊï¨ËØ∑ÂÖ≥Ê≥®Êõ¥Êñ∞ÔºÅ'
    },
    actions: {
      panelTitle: 'Êìç‰Ωú',
      connectWalletMessage: 'ËøûÊé•Èí±ÂåÖÂºÄÂßã',
      selectAssetMessage: 'ÈÄâÊã©ËµÑ‰∫ßÊü•ÁúãÊìç‰Ωú',
      selectedPrefix: 'Â∑≤ÈÄâÊã©',
      sendTokenButton: 'ÂèëÈÄÅ',
      transferNftButton: 'ËΩ¨ËÆ© NFT',
      interactContractButton: '‰∏éÂêàÁ∫¶‰∫§‰∫í',
      viewBalancesButton: 'Êü•Áúã‰ΩôÈ¢ù',
      createTokenButton: 'ÂàõÂª∫‰ª£Â∏Å',
      createNftButton: 'ÂàõÂª∫ NFT',
      airdropToolsButton: 'Á©∫ÊäïÂ∑•ÂÖ∑',
      loadingMessage: 'Âä†ËΩΩÊìç‰Ωú‰∏≠...',
      nativeSymbol: 'ÂéüÁîü'
    },
    airdropPage: {
      // AirdropPage
      title: 'Á©∫ÊäïÂ∑•ÂÖ∑',
      connectWalletMessage: 'ËØ∑ËøûÊé•ÊÇ®ÁöÑÈí±ÂåÖ‰ª•ÁÆ°ÁêÜÁ©∫Êäï„ÄÇ',
      loadContractPlaceholder: 'ËæìÂÖ•ÂêàÁ∫¶Âú∞ÂùÄ‰ª•Âä†ËΩΩ',
      loadButton: 'Âä†ËΩΩ',
      hideDeployButton: 'ÈöêËóèÈÉ®ÁΩ≤',
      deployNewButton: 'ÈÉ®ÁΩ≤Êñ∞ÁöÑ',
      newContractDeployedMessage: 'Êñ∞ÁöÑ %deployedContractType% ÂêàÁ∫¶Â∑≤ÈÉ®ÁΩ≤Âú® %address%',
      detectingContractTypeMessage: 'Ê≠£Âú®Ê£ÄÊµã %address% ÁöÑÂêàÁ∫¶Á±ªÂûã...',
      invalidAddressError: 'ÈîôËØØÔºöÊèê‰æõÁöÑÂú∞ÂùÄÊó†Êïà„ÄÇ',
      contractTypeDetectedMessage: 'Ê£ÄÊµãÂà∞ÂêàÁ∫¶Á±ªÂûã: %type%„ÄÇÊÇ®Áé∞Âú®ÂèØ‰ª•‰∏éÂÖ∂‰∫§‰∫í„ÄÇ',
      actionReceivedMessage: 'Â∑≤Êî∂Âà∞Êìç‰Ωú„ÄÇÊ≠£Âú®Âà∑Êñ∞Êï∞ÊçÆ...',
      contractInfoTitle: 'ÂêàÁ∫¶‰ø°ÊÅØ',
      addressLabel: 'Âú∞ÂùÄ:',
      setupStatusLabel: 'ËÆæÁΩÆ:',
      yes: 'ÊòØ',
      no: 'Âê¶',
      tokenLabel: '‰ª£Â∏Å:',
      decimalsLabel: 'Â∞èÊï∞‰ΩçÊï∞:',
      totalAllocatedLabel: 'ÊÄªÂàÜÈÖç:',
      totalClaimedLabel: 'ÊÄªÂ∑≤È¢ÜÂèñ:',
      vestingStartLabel: 'ÂΩíÂ±ûÂºÄÂßã:',
      vestingDurationLabel: 'ÂΩíÂ±ûÊåÅÁª≠Êó∂Èó¥:',
      stakingContractLabel: 'Ë¥®ÊäºÂêàÁ∫¶:',
      snapshotBlockLabel: 'Âø´ÁÖßÂå∫Âùó:',
      feeTokenLabel: 'Ë¥πÁî®‰ª£Â∏Å:',
      claimFeeLabel: 'È¢ÜÂèñË¥πÁî®:',
      // DeployPanel
      walletRequiredError: 'ÈÉ®ÁΩ≤ÈúÄË¶ÅËøûÊé•Èí±ÂåÖ„ÄÇ',
      fieldsRequiredError: 'ÈúÄË¶Å‰ª£Â∏ÅÂú∞ÂùÄÂíåÁ©∫ÊäïÁªìÊùüÊó•Êúü„ÄÇ',
      vestingDateRequiredError: 'Ê≠§ÂêàÁ∫¶Á±ªÂûãÈúÄË¶ÅÂΩíÂ±ûÁªìÊùüÊó•Êúü„ÄÇ',
      vestingDateFutureError: 'ÂΩíÂ±ûÁªìÊùüÊó•ÊúüÂøÖÈ°ªÂú®Êú™Êù•„ÄÇ',
      deployTransactionMessage: 'Ê≠£Âú®ÈÉ®ÁΩ≤‰∫§Êòì',
      feeConfigMessage: 'ÂêàÁ∫¶Â∑≤ÈÉ®ÁΩ≤„ÄÇÊ≠£Âú®ÈÖçÁΩÆÊñá‰ª∂...',
      deploySuccessMessage: 'ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü',
      feeConfigSuccessMessage: 'Ë¥πÁî®ËÆæÁΩÆÈÖçÁΩÆÊàêÂäüÔºÅ',
      transactionRejected: 'Áî®Êà∑ÊãíÁªù‰∫Ü‰∫§Êòì„ÄÇ',
      deployErrorMessage: 'ÈÉ®ÁΩ≤ÈîôËØØ: ',
      panelTitle: 'ÈÉ®ÁΩ≤Êñ∞ÁöÑÁ©∫ÊäïÂêàÁ∫¶',
      panelDescription: 'ÈÄâÊã©ÂêàÁ∫¶Á±ªÂûãÂπ∂Â°´ÂÜôËØ¶ÁªÜ‰ø°ÊÅØ‰ª•ËøõË°åÈÉ®ÁΩ≤„ÄÇ',
      contractTypeLabel: 'ÂêàÁ∫¶Á±ªÂûã',
      tokenAddressLabel: 'Á©∫Êäï‰ª£Â∏ÅÂú∞ÂùÄ',
      airdropDateLabel: 'Á©∫ÊäïÁªìÊùüÊó•Êúü',
      vestingDateLabel: 'ÂΩíÂ±ûÁªìÊùüÊó•Êúü',
      feeTypeLabel: 'Ë¥πÁî®Á±ªÂûã',
      nativeOption: 'ÂéüÁîü (ETH, MATIC, Á≠â)',
      erc20Option: 'ERC20 ‰ª£Â∏Å',
      feeTokenAddressLabel: 'Ë¥πÁî®‰ª£Â∏ÅÂú∞ÂùÄ',
      feeAmountLabel: 'Ë¥πÁî®ÈáëÈ¢ù',
      feeAmountPlaceholder: '‰æãÂ¶Ç 0.1',
      deployWaiting: 'Á≠âÂæÖÊâπÂáÜ...',
      deployConfirming: 'Á°ÆËÆ§ÈÉ®ÁΩ≤‰∏≠...',
      deployButton: 'ÈÉ®ÁΩ≤ÂêàÁ∫¶',
      gasWarning: 'Ê≠§‰∫§ÊòìÂ∞ÜÊî∂ÂèñÁáÉÊñôË¥π„ÄÇ',
      // OwnerPanel
      ownerPanelTitle: 'ÊâÄÊúâËÄÖÈù¢Êùø',
      transactionSuccess: '‰∫§ÊòìÁ°ÆËÆ§ÊàêÂäüÔºÅ',
      transactionError: 'ÈîôËØØ: ',
      invalidAllocations: 'ÈîôËØØÔºöËØ∑Ê£ÄÊü•ÂèóÁõä‰∫∫Âú∞ÂùÄÂπ∂Á°Æ‰øùÂàóË°®ÂåπÈÖç„ÄÇ',
      invalidAmount: 'ÈîôËØØÔºöÊèê‰æõÁöÑÈáëÈ¢ùÊó†Êïà„ÄÇ',
      addingAllocations: 'Ê≠£Âú®Ê∑ªÂä†ÂàÜÈÖç...',
      fundingContract: 'Ê≠£Âú®ÂêëÂêàÁ∫¶ËΩ¨Áßª %amount% ‰ª£Â∏Å...',
      withdrawingUnclaimed: 'Ê≠£Âú®ÊèêÂèñÊó†‰∫∫È¢ÜÂèñÁöÑ‰ª£Â∏Å...',
      emergencyWithdrawing: 'Ê≠£Âú®ÊâßË°åÁ¥ßÊÄ•ÊèêÂèñ...',
      step1Title: 'Ê≠•È™§1ÔºöÊ∑ªÂä†ÂàÜÈÖç',
      step1Description: 'ÂÆö‰πâË∞ÅÊé•Êî∂‰ª£Â∏Å‰ª•ÂèäÊï∞Èáè„ÄÇÁî®ÈÄóÂè∑ÂàÜÈöîÂú∞ÂùÄÂíåÈáëÈ¢ù„ÄÇ',
      beneficiariesPlaceholder: 'ÂèóÁõä‰∫∫Âú∞ÂùÄ (0x..., 0x...)',
      amountsPlaceholder: 'ÈáëÈ¢ù (100.5, 50, ...)',
      addAllocationButton: 'Ê∑ªÂä†ÂàÜÈÖç',
      processing: 'Â§ÑÁêÜ‰∏≠...',
      step2Title: 'Ê≠•È™§2Ôºö‰∏∫Á©∫ÊäïÂêàÁ∫¶Ê≥®ËµÑ',
      step2Description: 'Â∞Ü‰ª£Â∏Å‰ªéÊÇ®ÁöÑÈí±ÂåÖËΩ¨ÁßªÂà∞ÂêàÁ∫¶‰∏≠Ôºå‰ª•‰æøÂèØ‰ª•È¢ÜÂèñ„ÄÇ',
      currentBalance: 'ÂΩìÂâçÂêàÁ∫¶‰ΩôÈ¢ù:',
      fundAmountPlaceholder: 'Ê≥®ËµÑÈáëÈ¢ù',
      fundButton: '‰∏∫ÂêàÁ∫¶Ê≥®ËµÑ',
      contractManagementTitle: 'ÂêàÁ∫¶ÁÆ°ÁêÜ',
      withdrawUnclaimedButton: 'ÊèêÂèñÊó†‰∫∫È¢ÜÂèñÁöÑ',
      emergencyTokenPlaceholder: '‰ª£Â∏ÅÂú∞ÂùÄÔºàÁî®‰∫éÁ¥ßÊÄ•ÊèêÂèñÔºâ',
      emergencyWithdrawButton: 'Á¥ßÊÄ•ÊèêÂèñ',
      // UserPanel
      userPanel_title: 'Áî®Êà∑Èù¢Êùø',
      userPanel_successMessage: 'Êìç‰ΩúÊàêÂäüÂÆåÊàêÔºÅ',
      userPanel_errorPrefix: 'ÈîôËØØ: ',
      userPanel_withdrawButton: 'ÊèêÂèñ',
      userPanel_claimVestButton: 'È¢ÜÂèñÂΩíÂ±û‰ª£Â∏Å',
      userPanel_claimStakingButton: 'È¢ÜÂèñË¥®ÊäºÂ•ñÂä±',
      userPanel_claimTokensButton: 'È¢ÜÂèñ‰ª£Â∏Å',
      userPanel_noAllocationMessage: 'ÊÇ®Ê≤°ÊúâÂèØÈ¢ÜÂèñÁöÑÂàÜÈÖç„ÄÇ',
      userPanel_alreadyClaimedMessage: 'ÊÇ®Â∑≤ÁªèÈ¢ÜÂèñ‰∫ÜÊÇ®ÁöÑ‰ª£Â∏Å„ÄÇ',
      userPanel_processingMessage: 'Ê≠£Âú®Â§ÑÁêÜÊÇ®ÁöÑËØ∑Ê±Ç...',
      userPanel_totalAllocationPrefix: 'ÊÇ®ÁöÑÊÄªÂàÜÈÖç',
      userPanel_claimableVestedPrefix: 'ÂèØÈ¢ÜÂèñ (Â∑≤ÂΩíÂ±û)',
      userPanel_claimablePrefix: 'ÊÇ®ÁöÑÂèØÈ¢ÜÂèñÈáëÈ¢ù',
      userPanel_claimedPrefix: 'Â∑≤È¢ÜÂèñ',
      userPanel_yes: 'ÊòØ',
      userPanel_no: 'Âê¶',
      userPanel_processing: 'Â§ÑÁêÜ‰∏≠...',
      userPanel_noTokensMessage: 'ÊÇ®‰∏çÁ¨¶ÂêàÊ≠§Á©∫ÊäïËµÑÊ†ºÊàñÊ≠§Êó∂Ê≤°ÊúâÂèØÈ¢ÜÂèñÁöÑ‰ª£Â∏Å„ÄÇ'
    }
  },
  ko: {
    common: {
      welcome: 'ÌôòÏòÅÌï©ÎãàÎã§',
      loading: 'Î°úÎî© Ï§ë...',
      connect: 'Ïó∞Í≤∞',
      disconnect: 'Ïó∞Í≤∞ ÎÅäÍ∏∞',
      cancel: 'Ï∑®ÏÜå',
      confirm: 'ÌôïÏù∏',
      success: 'ÏÑ±Í≥µ',
      error: 'Ïò§Î•ò',
      retry: 'Îã§Ïãú ÏãúÎèÑ',
      close: 'Îã´Í∏∞',
      // Panel translations
      transactionHistory: 'Í±∞Îûò ÎÇ¥Ïó≠',
      actions: 'Ïï°ÏÖò',
      openHistoryPanel: 'ÎÇ¥Ïó≠ Ìå®ÎÑê Ïó¥Í∏∞',
      openActionPanel: 'Ïï°ÏÖò Ìå®ÎÑê Ïó¥Í∏∞',
      closePanel: 'Ìå®ÎÑê Îã´Í∏∞',
      openPanel: 'Ìå®ÎÑê Ïó¥Í∏∞',
      noTransactionsYet: 'ÏïÑÏßÅ Í±∞ÎûòÍ∞Ä ÏóÜÏäµÎãàÎã§.',
      clearTransactionHistoryConfirm: 'Ï†ïÎßê Î™®Îì† Í±∞Îûò ÎÇ¥Ïó≠ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
      clearAllHistory: 'Î™®Îì† ÎÇ¥Ïó≠ ÏÇ≠Ï†ú',
      hash: 'Ìï¥Ïãú:',
      contract: 'Ïª®Ìä∏ÎûôÌä∏:',
      copied: 'Î≥µÏÇ¨Îê®!',
      deleteTransaction: 'Í±∞Îûò ÏÇ≠Ï†ú',
      interact: 'ÏÉÅÌò∏ÏûëÏö©',
      // Transaction types
      sendPrefix: 'Î≥¥ÎÇ¥Í∏∞',
      deployPrefix: 'Î∞∞Ìè¨',
      mintPrefix: 'Î∞úÌñâ',
      transferPrefix: 'Ïù¥Ï†Ñ',
      burnPrefix: 'ÏÜåÍ∞Å',
      interactionType: 'ÏÉÅÌò∏ÏûëÏö©',
      approvePrefix: 'ÏäπÏù∏',
      // Specific transaction types
      deployAirdropStandard: 'ÌëúÏ§Ä ÏóêÏñ¥ÎìúÎ°≠ Î∞∞Ìè¨',
      deployAirdropWithFee: 'Ïú†Î£å ÏóêÏñ¥ÎìúÎ°≠ Î∞∞Ìè¨',
      deployAirdropVesting: 'Î≤†Ïä§ÌåÖ ÏóêÏñ¥ÎìúÎ°≠ Î∞∞Ìè¨',
      deployAirdropStaking: 'Ïä§ÌÖåÏù¥ÌÇπ ÏóêÏñ¥ÎìúÎ°≠ Î∞∞Ìè¨',
      deployAirdropWithdraw: 'Ï∂úÍ∏à ÏóêÏñ¥ÎìúÎ°≠ Î∞∞Ìè¨',
      sendTxType: 'Î≥¥ÎÇ¥Í∏∞ Í±∞Îûò',
      deployTxType: 'Í≥ÑÏïΩ Î∞∞Ìè¨',
      mintInteraction: 'Î∞úÌñâ ÏÉÅÌò∏ÏûëÏö©',
      transferInteraction: 'Ïù¥Ï†Ñ ÏÉÅÌò∏ÏûëÏö©',
      burnInteraction: 'ÏÜåÍ∞Å ÏÉÅÌò∏ÏûëÏö©',
      approveInteraction: 'ÏäπÏù∏ ÏÉÅÌò∏ÏûëÏö©',
      createTokenInteraction: 'ÌÜ†ÌÅ∞ ÏÉùÏÑ± ÏÉÅÌò∏ÏûëÏö©',
      createNftInteraction: 'NFT ÏÉùÏÑ± ÏÉÅÌò∏ÏûëÏö©',
      airdropInteraction: 'ÏóêÏñ¥ÎìúÎ°≠ ÏÉÅÌò∏ÏûëÏö©'
    },
    nav: {
      home: 'Ìôà',
      balance: 'ÏûîÏï°',
      createToken: 'ÌÜ†ÌÅ∞ ÏÉùÏÑ±',
      createNft: 'NFT ÏÉùÏÑ±',
      airdropTools: 'ÏóêÏñ¥ÎìúÎ°≠ ÎèÑÍµ¨',
      connectWallet: 'ÏõîÎ†õ Ïó∞Í≤∞',
      connectPrivateKey: 'Í∞úÏù∏ÌÇ§Î°ú Ïó∞Í≤∞',
      rescueDapp: 'Íµ¨Ï∂ú DApp',
      disconnect: 'Ïó∞Í≤∞ Ìï¥Ï†ú'
    },
    home: {
      welcomeTitle: 'EVM ToolsÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§',
      welcomeDescription: 'EVM ToolsÎäî EVM Ìò∏Ìôò Î∏îÎ°ùÏ≤¥Ïù∏ÏóêÏÑú Îã§ÏñëÌïú Ïä§ÎßàÌä∏ Í≥ÑÏïΩÏùÑ ÏÉùÏÑ±, Î∞∞Ìè¨ Î∞è ÏÉÅÌò∏ÏûëÏö©Ìï† Ïàò ÏûàÍ≤å ÌïòÎäî Ìè¨Í¥ÑÏ†ÅÏù∏ ÌÉàÏ§ëÏïôÌôî Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏûÖÎãàÎã§. Ïù¥ ÌîåÎû´ÌèºÏùÄ Î∏îÎ°ùÏ≤¥Ïù∏ ÏûêÏÇ∞Í≥º Í±∞ÎûòÎ•º ÏâΩÍ≤å Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÎäî ÏßÅÍ¥ÄÏ†ÅÏù∏ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º Ï†úÍ≥µÌï©ÎãàÎã§.',
      keyFeatures: 'Ï£ºÏöî Í∏∞Îä•',
      tokenCreationTitle: 'ÌÜ†ÌÅ∞ ÏÉùÏÑ±',
      tokenCreationDesc: 'Î™á Î≤àÏùò ÌÅ¥Î¶≠ÏúºÎ°ú ÏûêÏã†ÎßåÏùò ÎßûÏ∂§ ERC-20 ÌÜ†ÌÅ∞ÏùÑ ÏÉùÏÑ±ÌïòÏÑ∏Ïöî. ÌÜ†ÌÅ∞ Ïù¥Î¶Ñ, Í∏∞Ìò∏, Í≥µÍ∏âÎüâ Í∑∏Î¶¨Í≥† Î∞úÌñâ, ÏÜåÍ∞Å, ÌóàÍ∞Ä Í∏∞Îä•Í≥º Í∞ôÏùÄ Í≥†Í∏â Í∏∞Îä•ÏùÑ Íµ¨ÏÑ±Ìï©ÎãàÎã§. Ïï±ÏóêÏÑú ÏßÅÏ†ë Î∞∞Ìè¨ÌïòÍ≥† Ï¶âÏãú ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.',
      nftCreationTitle: 'NFT ÏÉùÏÑ±',
      nftCreationDesc: 'ÏûêÏã†Ïùò Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ÏôÄ Ïù¥ÎØ∏ÏßÄÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÎßûÏ∂§ ERC-721 NFTÎ•º Î∞úÌñâÌïòÏÑ∏Ïöî. ÎèÖÌäπÌïú ÎîîÏßÄÌÑ∏ ÏûêÏÇ∞ÏùÑ ÏÉùÏÑ±ÌïòÍ≥† Î∏îÎ°ùÏ≤¥Ïù∏Ïóê Î∞∞Ìè¨Ìï©ÎãàÎã§. ÏûêÏã†ÎßåÏùò NFT Ïª¨Î†âÏÖòÏùÑ Ï∂úÏãúÌïòÍ≥† Ïã∂ÏùÄ ÏïÑÌã∞Ïä§Ìä∏, ÏàòÏßëÍ∞Ä, Ï†úÏûëÏûêÏóêÍ≤å ÏôÑÎ≤ΩÌï©ÎãàÎã§.',
      airdropContractsTitle: 'ÏóêÏñ¥ÎìúÎ°≠ Í≥ÑÏïΩ',
      airdropContractsDesc: 'ÌÜ†ÌÅ∞Ïóê ÎåÄÌïú ÏóêÏñ¥ÎìúÎ°≠ Í≥ÑÏïΩÏùÑ Î∞∞Ìè¨ÌïòÍ≥† Íµ¨ÏÑ±Ìï©ÎãàÎã§. Ï≤≠Íµ¨ Í∏∞Í∞ÑÏùÑ ÏÑ§Ï†ïÌïòÍ≥† ÏÜåÏú†Ïûê Ïª®Ìä∏Î°§ÏùÑ Í¥ÄÎ¶¨ÌïòÎ©∞ Ïª§ÎÆ§ÎãàÌã∞Ïóê Ìö®Ïú®Ï†ÅÏúºÎ°ú ÌÜ†ÌÅ∞ÏùÑ Î∂ÑÎ∞∞Ìï©ÎãàÎã§. ÏóêÏñ¥ÎìúÎ°≠ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î°ú Î∂ÑÎ∞∞ Ï∫†ÌéòÏù∏Ïùò Î™®Îì† Ï∏°Î©¥ÏùÑ ÏâΩÍ≤å Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
      tokenInteractionTitle: 'ÌÜ†ÌÅ∞ ÏÉÅÌò∏ÏûëÏö©',
      tokenInteractionDesc: 'Îã§Î•∏ Ï£ºÏÜåÎ°ú ÌÜ†ÌÅ∞ÏùÑ Ï†ÑÏÜ°ÌïòÍ≥† ÏûîÏï°ÏùÑ ÌôïÏù∏ÌïòÎ©∞ Í∏∞Ï°¥ Ïä§ÎßàÌä∏ Í≥ÑÏïΩÍ≥º ÏÉÅÌò∏ÏûëÏö©Ìï©ÎãàÎã§. ÏßÅÍ¥ÄÏ†ÅÏù∏ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î°ú Îã§ÏñëÌïú ÎÑ§Ìä∏ÏõåÌÅ¨ÏóêÏÑú Ìä∏ÎûúÏû≠ÏÖòÏùÑ ÏàòÌñâÌïòÍ≥† ÏûêÏÇ∞ÏùÑ ÏâΩÍ≤å Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
      dashboardMessage: 'Ïù¥ ÎåÄÏãúÎ≥¥ÎìúÎäî Ï§ëÏïô Ï†úÏñ¥ ÌåêÎÑ¨ Ïó≠Ìï†ÏùÑ Ìï©ÎãàÎã§. ÏûîÏï°ÏóêÏÑú ÏûêÏÇ∞ÏùÑ ÏÑ†ÌÉùÌïòÏó¨ ÏãúÏûëÌïòÍ±∞ÎÇò Ïò§Î•∏Ï™Ω ÏûëÏóÖ Ìå®ÎÑêÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÏÉà ÏûêÏÇ∞ÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§. Í±∞Îûò ÎÇ¥Ïó≠ÏùÄ ÏôºÏ™Ω Ìå®ÎÑêÏóêÏÑú Î≥º Ïàò ÏûàÏäµÎãàÎã§.',
      developmentMessage: 'ÌîåÎû´Ìèº Í∏∞Îä•ÏùÑ ÌôïÏû•Ìï† Îçî ÎßéÏùÄ Í∏∞Îä•Í≥º ÎèÑÍµ¨Î•º Ï∂îÍ∞ÄÌïòÍ∏∞ ÏúÑÌï¥ Ï†ÅÍ∑πÏ†ÅÏúºÎ°ú ÎÖ∏Î†•ÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÏóÖÎç∞Ïù¥Ìä∏Î•º Ï£ºÏãúÌïòÏã≠ÏãúÏò§!'
    },
    actions: {
      panelTitle: 'ÏûëÏóÖ',
      connectWalletMessage: 'ÏõîÎ†õÏùÑ Ïó∞Í≤∞ÌïòÏó¨ ÏãúÏûëÌïòÏÑ∏Ïöî',
      selectAssetMessage: 'ÏûêÏÇ∞ÏùÑ ÏÑ†ÌÉùÌïòÏó¨ ÏûëÏóÖÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî',
      selectedPrefix: 'ÏÑ†ÌÉùÎê®',
      sendTokenButton: 'Î≥¥ÎÇ¥Í∏∞',
      transferNftButton: 'NFT Ïù¥Ï†ÑÌïòÍ∏∞',
      interactContractButton: 'Í≥ÑÏïΩÍ≥º ÏÉÅÌò∏ÏûëÏö©',
      viewBalancesButton: 'ÏûîÏï° Î≥¥Í∏∞',
      createTokenButton: 'ÌÜ†ÌÅ∞ ÏÉùÏÑ±',
      createNftButton: 'NFT ÏÉùÏÑ±',
      airdropToolsButton: 'ÏóêÏñ¥ÎìúÎ°≠ ÎèÑÍµ¨',
      loadingMessage: 'ÏûëÏóÖ Î°úÎî© Ï§ë...',
      nativeSymbol: 'ÎÑ§Ïù¥Ìã∞Î∏å'
    },
    airdropPage: {
      // AirdropPage
      title: 'ÏóêÏñ¥ÎìúÎ°≠ ÎèÑÍµ¨',
      connectWalletMessage: 'ÏóêÏñ¥ÎìúÎ°≠ÏùÑ Í¥ÄÎ¶¨ÌïòÎ†§Î©¥ ÏßÄÍ∞ëÏùÑ Ïó∞Í≤∞ÌïòÏã≠ÏãúÏò§.',
      loadContractPlaceholder: 'Î°úÎìúÌï† Í≥ÑÏïΩ Ï£ºÏÜå ÏûÖÎ†•',
      loadButton: 'Î°úÎìú',
      hideDeployButton: 'Î∞∞Ìè¨ Ïà®Í∏∞Í∏∞',
      deployNewButton: 'ÏÉàÎ°ú Î∞∞Ìè¨',
      newContractDeployedMessage: 'ÏÉà %deployedContractType% Í≥ÑÏïΩÏù¥ %address%Ïóê Î∞∞Ìè¨ÎêòÏóàÏäµÎãàÎã§',
      detectingContractTypeMessage: '%address%Ïùò Í≥ÑÏïΩ Ïú†ÌòïÏùÑ Í∞êÏßÄÌïòÎäî Ï§ë...',
      invalidAddressError: 'Ïò§Î•ò: ÏûòÎ™ªÎêú Ï£ºÏÜåÍ∞Ä Ï†úÍ≥µÎêòÏóàÏäµÎãàÎã§.',
      contractTypeDetectedMessage: 'Í≥ÑÏïΩ Ïú†Ìòï Í∞êÏßÄÎê®: %type%. Ïù¥Ï†ú ÏÉÅÌò∏ ÏûëÏö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
      actionReceivedMessage: 'ÏûëÏóÖÏùÑ Î∞õÏïòÏäµÎãàÎã§. Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°ú Í≥†Ïπ® Ï§ë...',
      contractInfoTitle: 'Í≥ÑÏïΩ Ï†ïÎ≥¥',
      addressLabel: 'Ï£ºÏÜå:',
      setupStatusLabel: 'ÏÑ§Ï†ï:',
      yes: 'Ïòà',
      no: 'ÏïÑÎãàÏöî',
      tokenLabel: 'ÌÜ†ÌÅ∞:',
      decimalsLabel: 'ÏÜåÏàò ÏûêÎ¶øÏàò:',
      totalAllocatedLabel: 'Ï¥ù Ìï†ÎãπÎüâ:',
      totalClaimedLabel: 'Ï¥ù Ï≤≠Íµ¨Îê®:',
      vestingStartLabel: 'Î≤†Ïä§ÌåÖ ÏãúÏûë:',
      vestingDurationLabel: 'Î≤†Ïä§ÌåÖ Í∏∞Í∞Ñ:',
      stakingContractLabel: 'Ïä§ÌÖåÏù¥ÌÇπ Í≥ÑÏïΩ:',
      snapshotBlockLabel: 'Ïä§ÎÉÖÏÉ∑ Î∏îÎ°ù:',
      feeTokenLabel: 'ÏàòÏàòÎ£å ÌÜ†ÌÅ∞:',
      claimFeeLabel: 'Ï≤≠Íµ¨ ÏàòÏàòÎ£å:',
      // DeployPanel
      walletRequiredError: 'Î∞∞Ìè¨ÌïòÎ†§Î©¥ ÏßÄÍ∞ë Ïó∞Í≤∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.',
      fieldsRequiredError: 'ÌÜ†ÌÅ∞ Ï£ºÏÜåÏôÄ ÏóêÏñ¥ÎìúÎ°≠ Ï¢ÖÎ£å ÎÇ†ÏßúÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.',
      vestingDateRequiredError: 'Ïù¥ Í≥ÑÏïΩ Ïú†ÌòïÏóêÎäî Î≤†Ïä§ÌåÖ Ï¢ÖÎ£å ÎÇ†ÏßúÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.',
      vestingDateFutureError: 'Î≤†Ïä§ÌåÖ Ï¢ÖÎ£å ÎÇ†ÏßúÎäî ÎØ∏ÎûòÏó¨Ïïº Ìï©ÎãàÎã§.',
      deployTransactionMessage: 'Ìä∏ÎûúÏû≠ÏÖò Î∞∞Ìè¨ Ï§ë',
      feeConfigMessage: 'Í≥ÑÏïΩÏù¥ Î∞∞Ìè¨ÎêòÏóàÏäµÎãàÎã§. Ïù¥Ï†ú ÏàòÏàòÎ£å ÏÑ§Ï†ïÏùÑ Íµ¨ÏÑ±Ìï©ÎãàÎã§...',
      deploySuccessMessage: 'Í≥ÑÏïΩÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞∞Ìè¨ÎêòÏóàÏäµÎãàÎã§',
      feeConfigSuccessMessage: 'ÏàòÏàòÎ£å ÏÑ§Ï†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Íµ¨ÏÑ±ÎêòÏóàÏäµÎãàÎã§!',
      transactionRejected: 'ÏÇ¨Ïö©ÏûêÍ∞Ä Ìä∏ÎûúÏû≠ÏÖòÏùÑ Í±∞Î∂ÄÌñàÏäµÎãàÎã§.',
      deployErrorMessage: 'Î∞∞Ìè¨ Ïò§Î•ò: ',
      panelTitle: 'ÏÉà ÏóêÏñ¥ÎìúÎ°≠ Í≥ÑÏïΩ Î∞∞Ìè¨',
      panelDescription: 'Í≥ÑÏïΩ Ïú†ÌòïÏùÑ ÏÑ†ÌÉùÌïòÍ≥† Î∞∞Ìè¨Ìï† ÏÑ∏Î∂Ä Ï†ïÎ≥¥Î•º ÏûÖÎ†•ÌïòÏã≠ÏãúÏò§.',
      contractTypeLabel: 'Í≥ÑÏïΩ Ïú†Ìòï',
      tokenAddressLabel: 'ÏóêÏñ¥ÎìúÎ°≠ ÌÜ†ÌÅ∞ Ï£ºÏÜå',
      airdropDateLabel: 'ÏóêÏñ¥ÎìúÎ°≠ Ï¢ÖÎ£å ÎÇ†Ïßú',
      vestingDateLabel: 'Î≤†Ïä§ÌåÖ Ï¢ÖÎ£å ÎÇ†Ïßú',
      feeTypeLabel: 'ÏàòÏàòÎ£å Ïú†Ìòï',
      nativeOption: 'ÎÑ§Ïù¥Ìã∞Î∏å (ETH, MATIC Îì±)',
      erc20Option: 'ERC20 ÌÜ†ÌÅ∞',
      feeTokenAddressLabel: 'ÏàòÏàòÎ£å ÌÜ†ÌÅ∞ Ï£ºÏÜå',
      feeAmountLabel: 'ÏàòÏàòÎ£å Í∏àÏï°',
      feeAmountPlaceholder: 'Ïòà: 0.1',
      deployWaiting: 'ÏäπÏù∏ ÎåÄÍ∏∞ Ï§ë...',
      deployConfirming: 'Î∞∞Ìè¨ ÌôïÏù∏ Ï§ë...',
      deployButton: 'Í≥ÑÏïΩ Î∞∞Ìè¨',
      gasWarning: 'Ïù¥ Ìä∏ÎûúÏû≠ÏÖòÏóê ÎåÄÌï¥ Í∞ÄÏä§ ÏöîÍ∏àÏù¥ Î∂ÄÍ≥ºÎê©ÎãàÎã§.',
      // OwnerPanel
      ownerPanelTitle: 'ÏÜåÏú†Ïûê Ìå®ÎÑê',
      transactionSuccess: 'Ìä∏ÎûúÏû≠ÏÖòÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÌôïÏù∏ÎêòÏóàÏäµÎãàÎã§!',
      transactionError: 'Ïò§Î•ò: ',
      invalidAllocations: 'Ïò§Î•ò: ÏàòÌòúÏûê Ï£ºÏÜåÎ•º ÌôïÏù∏ÌïòÍ≥† Î™©Î°ùÏù¥ ÏùºÏπòÌïòÎäîÏßÄ ÌôïÏù∏ÌïòÏã≠ÏãúÏò§.',
      invalidAmount: 'Ïò§Î•ò: ÏûòÎ™ªÎêú Í∏àÏï°Ïù¥ Ï†úÍ≥µÎêòÏóàÏäµÎãàÎã§.',
      addingAllocations: 'Ìï†Îãπ Ï∂îÍ∞Ä Ï§ë...',
      fundingContract: 'Í≥ÑÏïΩÏóê %amount% ÌÜ†ÌÅ∞ Ï†ÑÏÜ° Ï§ë...',
      withdrawingUnclaimed: 'ÎØ∏Ï≤≠Íµ¨ ÌÜ†ÌÅ∞ Ïù∏Ï∂ú Ï§ë...',
      emergencyWithdrawing: 'Í∏¥Í∏â Ïù∏Ï∂ú ÏàòÌñâ Ï§ë...',
      step1Title: '1Îã®Í≥Ñ: Ìï†Îãπ Ï∂îÍ∞Ä',
      step1Description: 'ÎàÑÍ∞Ä ÏñºÎßàÎÇò ÎßéÏùÄ ÌÜ†ÌÅ∞ÏùÑ Î∞õÏùÑÏßÄ Ï†ïÏùòÌï©ÎãàÎã§. Ï£ºÏÜåÏôÄ Í∏àÏï°ÏùÑ ÏâºÌëúÎ°ú Íµ¨Î∂ÑÌï©ÎãàÎã§.',
      beneficiariesPlaceholder: 'ÏàòÌòúÏûê Ï£ºÏÜå (0x..., 0x...)',
      amountsPlaceholder: 'Í∏àÏï° (100.5, 50, ...)',
      addAllocationButton: 'Ìï†Îãπ Ï∂îÍ∞Ä',
      processing: 'Ï≤òÎ¶¨ Ï§ë...',
      step2Title: '2Îã®Í≥Ñ: ÏóêÏñ¥ÎìúÎ°≠ Í≥ÑÏïΩ ÏûêÍ∏à Ï°∞Îã¨',
      step2Description: 'ÏßÄÍ∞ëÏóêÏÑú Í≥ÑÏïΩÏúºÎ°ú ÌÜ†ÌÅ∞ÏùÑ Ï†ÑÏÜ°ÌïòÏó¨ Ï≤≠Íµ¨Ìï† Ïàò ÏûàÎèÑÎ°ù Ìï©ÎãàÎã§.',
      currentBalance: 'ÌòÑÏû¨ Í≥ÑÏïΩ ÏûîÏï°:',
      fundAmountPlaceholder: 'ÏûêÍ∏à Ï°∞Îã¨ Í∏àÏï°',
      fundButton: 'Í≥ÑÏïΩ ÏûêÍ∏à Ï°∞Îã¨',
      contractManagementTitle: 'Í≥ÑÏïΩ Í¥ÄÎ¶¨',
      withdrawUnclaimedButton: 'ÎØ∏Ï≤≠Íµ¨ Ïù∏Ï∂ú',
      emergencyTokenPlaceholder: 'ÌÜ†ÌÅ∞ Ï£ºÏÜå (Í∏¥Í∏â Ïù∏Ï∂úÏö©)',
      emergencyWithdrawButton: 'Í∏¥Í∏â Ïù∏Ï∂ú',
      // UserPanel
      userPanel_title: 'ÏÇ¨Ïö©Ïûê Ìå®ÎÑê',
      userPanel_successMessage: 'ÏûëÏóÖÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!',
      userPanel_errorPrefix: 'Ïò§Î•ò: ',
      userPanel_withdrawButton: 'Ïù∏Ï∂ú',
      userPanel_claimVestButton: 'Î≤†Ïä§ÌåÖÎêú ÌÜ†ÌÅ∞ Ï≤≠Íµ¨',
      userPanel_claimStakingButton: 'Ïä§ÌÖåÏù¥ÌÇπ Î≥¥ÏÉÅ Ï≤≠Íµ¨',
      userPanel_claimTokensButton: 'ÌÜ†ÌÅ∞ Ï≤≠Íµ¨',
      userPanel_noAllocationMessage: 'Ï≤≠Íµ¨Ìï† Ìï†ÎãπÏù¥ ÏóÜÏäµÎãàÎã§.',
      userPanel_alreadyClaimedMessage: 'Ïù¥ÎØ∏ ÌÜ†ÌÅ∞ÏùÑ Ï≤≠Íµ¨ÌñàÏäµÎãàÎã§.',
      userPanel_processingMessage: 'ÏöîÏ≤≠ Ï≤òÎ¶¨ Ï§ë...',
      userPanel_totalAllocationPrefix: 'Ï¥ù Ìï†ÎãπÎüâ',
      userPanel_claimableVestedPrefix: 'Ï≤≠Íµ¨ Í∞ÄÎä• (Î≤†Ïä§ÌåÖÎê®)',
      userPanel_claimablePrefix: 'Ï≤≠Íµ¨ Í∞ÄÎä• Í∏àÏï°',
      userPanel_claimedPrefix: 'Ï≤≠Íµ¨Îê®',
      userPanel_yes: 'Ïòà',
      userPanel_no: 'ÏïÑÎãàÏöî',
      userPanel_processing: 'Ï≤òÎ¶¨ Ï§ë...',
      userPanel_noTokensMessage: 'Ïù¥ ÏóêÏñ¥ÎìúÎ°≠Ïóê Ìï¥ÎãπÎêòÏßÄ ÏïäÍ±∞ÎÇò ÌòÑÏû¨ Ï≤≠Íµ¨Ìï† ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§.'
    }
  }
};

interface LanguageContextType {
  currentLanguage: Language;
  changeLanguage: (lang: Language) => void;
  t: (key: string, namespace?: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>('en');
  const [hasMounted, setHasMounted] = useState(false);

  useEffect(() => {
    setHasMounted(true);

    // Load saved language from localStorage
    if (typeof window !== 'undefined') {
      const savedLang = localStorage.getItem('i18nextLng') as Language;
      if (savedLang && ['en', 'es', 'zh', 'ko'].includes(savedLang)) {
        setCurrentLanguage(savedLang);
      }
    }
  }, []);

  const changeLanguage = (lang: Language) => {
    setCurrentLanguage(lang);
    if (typeof window !== 'undefined') {
      localStorage.setItem('i18nextLng', lang);
      // Also set i18next language for compatibility
      if (typeof window !== 'undefined' && window.localStorage) {
        window.localStorage.setItem('i18nextLng', lang);
      }
    }
  };

  const t = (key: string, namespace: string = 'common'): string => {
    const langData = translations[currentLanguage];
    const namespaceData = (langData as any)[namespace] || langData.common;
    
    // Custom logic for userPanel keys
    if (namespace === 'userPanel') {
      const airdropNamespaceData = (langData as any)['airdropPage'] || {};
      const userPanelKey = `userPanel_${key}`;
      return airdropNamespaceData[userPanelKey] || key;
    }

    return namespaceData[key] || key;
  };

  const value = {
    currentLanguage,
    changeLanguage,
    t,
  };

  if (!hasMounted) {
    // During SSR/pre-hydration, render with English as default
    const ssrValue = {
      currentLanguage: 'en' as Language,
      changeLanguage,
      t: (key: string, ns?: string) => {
        if (ns === 'nav') {
          return translations.en.nav[key as keyof typeof translations.en.nav] || key;
        }
        if (ns === 'userPanel') {
          const airdropNs = translations.en.airdropPage;
          const userPanelKey = `userPanel_${key}` as keyof typeof airdropNs;
          return airdropNs[userPanelKey] || key;
        }
        return translations.en.common[key as keyof typeof translations.en.common] || key;
      },
    };

    return (
      <LanguageContext.Provider value={ssrValue}>
        {children}
      </LanguageContext.Provider>
    );
  }

  return (
    <LanguageContext.Provider value={value}>
    {children}
  </LanguageContext.Provider>
  );
};
